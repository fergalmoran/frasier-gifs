// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl"]
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  oauth_token        String? @db.Text
  oauth_token_secret String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  password      String?
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Tags          Tags[]
  Gif           Gif[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum SettingType {
  STRING
  BOOL
  NUMBER
}

model Setting {
  key   String      @id @db.VarChar
  value String      @db.VarChar
  type  SettingType @default(STRING)
}

model Gif {
  id String @id @default(cuid())

  title         String      @db.VarChar(100)
  description   String?     @db.VarChar(2000)
  searchTerms   String[]    @db.VarChar(2000)
  publicVisible Boolean     @default(false)
  upVotes       UpVotes[]
  downVotes     DownVotes[]

  createdAt DateTime @default(now())

  //TODO: remove nullable
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model UpVotes {
  id        String @id @default(cuid())
  browserId String @db.VarChar(1000)

  createdAt DateTime @default(now())
  gif       Gif      @relation(fields: [gifId], references: [id])
  gifId     String

  @@unique([browserId, gifId])
}

model DownVotes {
  id        String @id @default(cuid())
  browserId String @db.VarChar(1000)

  createdAt DateTime @default(now())
  gif       Gif      @relation(fields: [gifId], references: [id])
  gifId     String

  @@unique([browserId, gifId])
}

model Season {
  id       String    @id @default(cuid())
  number   Int       @unique
  episodes Episode[]
}

model Episode {
  id       String   @id @default(cuid())
  number   Int
  name     String
  airDate  DateTime
  Season   Season   @relation(fields: [seasonId], references: [id])
  seasonId String

  @@unique([number, seasonId])
}

model Tags {
  id     String @id @default(cuid())
  name   String @unique()
  user   User   @relation(fields: [userId], references: [id])
  userId String
}
