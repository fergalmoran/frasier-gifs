// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id       String    @id @default(cuid())
  email    String    @unique
  password String
  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Gif {
  id String @id @default(uuid())

  title       String  @db.VarChar(100)
  description String? @db.VarChar(2000)
  searchTerms String? @db.VarChar(2000)
  //this is temporary, filenames should always match the GUID above
  fileName    String  @db.VarChar(100)

  upVotes   UpVotes[]
  downVotes DownVotes[]

  createdAt DateTime @default(now())
}

model UpVotes {
  id        String @id @default(uuid())
  browserId String @db.VarChar(1000)

  createdAt DateTime @default(now())
  gif       Gif      @relation(fields: [gifId], references: [id])
  gifId     String

  @@unique([browserId, gifId])
}

model DownVotes {
  id        String @id @default(uuid())
  browserId String @db.VarChar(1000)

  createdAt DateTime @default(now())
  gif       Gif      @relation(fields: [gifId], references: [id])
  gifId     String

  @@unique([browserId, gifId])
}

model Season {
  id       String    @id @default(uuid())
  number   Int       @unique
  episodes Episode[]
}

model Episode {
  id       String   @id @default(uuid())
  number   Int
  name     String
  airDate  DateTime
  Season   Season   @relation(fields: [seasonId], references: [id])
  seasonId String

  @@unique([number, seasonId])
}
